#--------------------------------------------------------------------------------------
# This GitHub Actions workflow can be run locally using https://github.com/nektos/act
#
# act normally uses docker, but it can also be run using podman on Fedora 37:
# dnf install act-cli podman
# podman system service -t 0 &
# act --bind --container-daemon-socket $XDG_RUNTIME_DIR/podman/podman.sock -W .github/workflows/main.yml
#--------------------------------------------------------------------------------------
name: "Pytest test suites"

#
# The GitHub events that trigger this workflow:
# Checks can be skipped by adding "skip-checks: true" to a commit message,
# or requested by adding "request-checks: true" if disabled by default for pushes:
# https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks#skipping-and-requesting-checks-for-individual-commits
#
on: [push, pull_request]

# Docs: https://github.com/marketplace/actions/commit-status-updater#workflow-permissions
# and more info on https://github.com/actions/first-interaction/issues/10
# Allow actions in PRs from other repos to create a comment and update status:
permissions:
  pull-requests: write  # creating a comment
  statuses: write  #  # updating commit status

#
# Cancel a currently running workflow from the same PR, branch or tag
# when a new workflow is triggered:
# https://stackoverflow.com/questions/66335225/how-to-cancel-previous-runs-in-the-pr-when-you-push-new-commitsupdate-the-curre
#
concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

env:
  # Setup Coveralls to for parallel coverage upload from python2 and 3 workflows
  COVERALLS_PARALLEL: true
  DEBIAN_FRONTEND: noninteractive
  # No warnings for pip and pytest themselves; pytest enables warnings in conftest.py
  PYTHONWARNINGS: ignore
  # Development Mode for stronger checks: https://docs.python.org/3/library/devmode.html
  PYTHONDEVMODE: yes
jobs:
  container-tests:
    name: "Python2: Container tests"
    runs-on: ubuntu-22.04
    # https://github.com/Docker-Hub-frolvlad/docker-alpine-python2
    container: frolvlad/alpine-python2
    steps:
      - uses: actions/checkout@v4
      - name: Install test tools
        run: apk add --no-cache libxml2-utils bash
      - name: Install python requirements
        run: pip install -r requirements.txt
      - name: Test sar file collection, extended by XSI-1385 with plain-text SARs
        run: bash -x tests/integration/sar-file-collection.test.sh
      - name: Test creating a tarball for /etc/systemd
        run: bash -x tests/integration/xenserver-config-systemd.sh

  python2-tests:
    name: "Python2: PyLint and Pytest"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - uses: LizardByte/setup-python-action@master
        with:
          python-version: 2.7

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip2 install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip2 install -r requirements-dev.txt; fi
          pip2 install pylint==1.9.4

      - name: Run pylint-1.9.4 for pylint --py3k linting (configured in .pylintrc)
        run: python2 -m pylint xen-bugtool
      - name: Run python2 -m pytest to execute all unit and integration tests
        run: >
          python2 -m pytest -v -rA
          --cov xen-bugtool
          --cov tests/
          --junitxml=.git/pytest27.xml
          --cov-report term-missing
          --cov-report xml:.git/coverage27.xml

      - name: Upload coverage reports to Codecov for the Python 2.7 tests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: env.CODECOV_TOKEN && !cancelled() && github.event.pull_request.number
        run: >
          rm -rfv codecov;curl -O https://cli.codecov.io/latest/linux/codecov &&
          sudo chmod +x codecov && ./codecov upload-process --report-type coverage
          --git-service github --fail-on-error --dir .git --file coverage27.xml
          --flag python2.7 --name "Python 2.7 for main"
        continue-on-error: true


      - name: Upload coverage reports to Codecov for the Python 2.7 tests
        # If CODECOV_TOKEN is not set, use the legacy tokenless codecov action:
        if: ${{ !env.CODECOV_TOKEN && github.event.pull_request.number }}
        uses: codecov/codecov-action@v3
        env:
          PYTHON: python2.7
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          directory: .git
          files: coverage27.xml
          flags: python2.7
          env_vars: OS,PYTHON
          fail_ci_if_error: false
          name: "Python 2.7 for main"
          verbose: true

      - name: Add Pytest 2.7 coverage comment (if write permission is available)
        if: ${{ ! github.event.pull_request.head.repo.fork && github.event.pull_request.number }}
        uses: MishaKav/pytest-coverage-comment@main
        continue-on-error: true
        with:
          junitxml-path: .git/pytest27.xml
          pytest-xml-coverage-path: .git/coverage27.xml
          unique-id-for-comment: pytest-coverage-python27
          title: Pytest Code coverage comment for Python 2.7

      - name: Upload coverage reports to Coveralls
        env:
          COVERALLS_FLAG_NAME: python2.7
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -sL https://coveralls.io/coveralls-linux.tar.gz | tar -xz
          ./coveralls --service-name=github

  pre-commit:
    name: "Python3: Pre-Commit Suite"
    runs-on: ubuntu-22.04
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For diff-cover to get the changed lines: origin/master..HEAD

      # https://www.python4data.science/en/latest/productive/git/advanced/hooks/ci.html
      - uses: actions/setup-python@v5
        id: python
        with:
          python-version: '3.10'
          cache: 'pip'

      - run: pip install -r requirements-dev.txt
        name: Install the pytest dependencies for running the pytest suite using Python3

      - uses: actions/cache@v4
        name: Setup cache for running pre-commit fast
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      # https://docs.python.org/3/library/devmode.html#resourcewarning-example
      # If pytest runs with PYTHONDEVMODE=yes, it enables resource checks like
      # unclosed file warnings. Configure GitHub to show all such warnings as
      # annotations at the source location they occur in the PR code review:

      - run: >
          echo "::add-matcher::.github/workflows/Python-problemMatcher-status-report.json";
          echo "::notice::Sorry, GitHub tells that actions/cache@v4 is still v3
          and warns about using node16, which is wrong. So we've to bear with it.
          Bug reported: https://github.com/actions/cache/issues/1323"

      - uses: pre-commit/action@v3.0.0
        name: Run pre-commit checks
        with:
          # Show the output of the commands for the problem matcher, see above.
          extra_args: --all-files --verbose
        env:
          PYTHONDEVMODE: yes  # Enable Python3 checks. See the comment above.
          # Skip the no-commit-to-branch check inside of GitHub CI (for CI on merge to master)
          # TODO: For push workflows, fix check-branch-needs-rebase to work in GitHub CI.
          # GitHub PR workflows are already always rebased to the target branch (on run):
          SKIP: no-commit-to-branch,check-branch-needs-rebase

      - uses: frabert/replace-string-action@v2
        id: get_sonarcloud_project_key
        with:
          pattern: '(\w+)/(\w+)'
          replace-with: '$1_$2'
          string: ${{ github.repository }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        if: ${{ env.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ steps.get_sonarcloud_project_key.outputs.replaced }}
            -Dsonar.python.version=3.6
            -Dsonar.python.coverage.reportPaths=.git/coverage.xml
            -Dsonar.python.xunit.reportPath=.git/pytest.xml
            -Dsonar.sources=.
            -Dsonar.exclusions=tests/**
            -Dsonar.tests=tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload coverage reports to Codecov
        # If CODECOV_TOKEN is set, use the new codecov CLI to upload the coverage reports
        if: ${{ env.CODECOV_TOKEN && !cancelled() && github.event.pull_request.number }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: >
          pip install codecov-cli && codecovcli upload-process --report-type coverage
          --git-service github --fail-on-error --dir .git --file coverage.xml
          --flag python${{ steps.python.outputs.python-version }}
          --name "Python 3.x for main"
        continue-on-error: true


      - name: Upload coverage reports to Codecov (legacy Node.js 16 action)
        # If CODECOV_TOKEN is not set, use the legacy tokenless codecov action:
        if: ${{ !env.CODECOV_TOKEN && github.event.pull_request.number }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        uses: codecov/codecov-action@v3
        with:
          directory: .git
          env_vars: OS,PYTHON
          # Whether the job should fail if Codecov runs into an error during upload.
          # Not failing the job in this case is ok because the pre-commit checks
          # also contain a diff-cover job which would fail on missing changed lines:
          fail_ci_if_error: false
          flags: >
            ${{ format('python{0}', steps.python.outputs.python-version ) }}
          name: "Python 3.x for main"
          verbose: true


      - name: Add Pytest coverage comment (if write permission is available)
        if: ${{ ! github.event.pull_request.head.repo.fork && github.event.pull_request.number }}
        uses: MishaKav/pytest-coverage-comment@main
        continue-on-error: true
        with:
          junitxml-path: .git/pytest.xml
          pytest-xml-coverage-path: .git/coverage.xml
          unique-id-for-comment: pre-commit-coverage
          title: >
            Python3 coverage comment from
            https://github.com/marketplace/actions/pytest-coverage-comment


      - name: Upload coverage reports to Coveralls
        env:
          COVERALLS_FLAG_NAME: ${{ format('python{0}', steps.python.outputs.python-version ) }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pip install coveralls && coveralls --service=github && coveralls --finish || true
